XXXXX XXX XXXX XXXX XXXX XXXX XXXX XXXX
OP                   Data/adress --->                    
STATUSFLAGGOR:
Zero, Negative, Carry, Overflow, Read Ready Midi, Read Ready Touch

16 allmänna regs.
16 extra regs.

IF = Ingen förändring

ADRESSERINGSMODER:
-

adresser 11bitar

Destination skrivs direkt efter OP koden, source i slutet

--- Instruktioner ---
NOP
00000 XXX XXXX XXXX XXXX XXXX XXXX XXXX

TRAP
00001 XXX XXXX XXXX XXXX XXXX XXXX XXXX

STORE.c (constant) (specialfall där vi inte hade tillräckligt med bitar för adress och data) 
11000 AAA AAAA AAAA DDDD DDDD DDDD DDDD

STORE.r (from register) - stall
11001 AAA AAAA AAAA XXXX XXXX XXXR RRRR

STORE.wo (from register with constant offset) - stall
11010 AAAA AAAA AAA CCCC CCCC CCCR RRRR

STORE.wofr (from register with constant offset from register) - stall
11011 AAAA AAAA AAA XXXX XXOO OOOR RRRR
		(O = Register with offset data)
LOAD.a
11100 RRRR RXXX XXXX XXXX AAA AAAA AAAA

LOAD.c
11101 RRRR RXX XXXX DDDD DDDD DDDD DDDD

LOAD.wo (with offset)
11110 RRRR RCCC CCCC CCCC AAA AAAA AAAA

LOAD.wro (with offset in register)
11111 RRRR RXXX XXXO OOOO AAA AAAA AAAA

MOVE - stall
00100 RRRR RXX XXXX XXXX XXXX XXXR RRRR

---------------------------------------------
--Branch med offset i register behöver dataforwarding

BRANCH(till adress)
01000 XXXX XXXX XXXX XXXX AAA AAAA AAAA

BRANCH(offset i register) - stall
01001 XXX XXXX XXXX XXXX XXXX XXXR RRRR

BRANCH(offset från där man står)
01010 XXX XXXX XXXX XXXX XXOO OOOO OOOO 

BCC
10000 SSSS XXXX XXXX XXXX AAA AAAA AAAA
(S = status flag)

BCC(offset i reg) - stall
10001 SSSS XXX XXXX XXXX XXXX XXXR RRRR

BCC(offset från där man står)
10010 SSSS XXX XXXX XXXX XXOO OOOO OOOO

BNCC
10100 SSSS XXXX XXXX XXXX AAA AAAA AAAA
(S = status flag)

BNCC(offset i reg) - stall
10101 SSSS XXX XXXX XXXX XXXX XXXR RRRR

BNCC(offset från där man står)
10110 SSSS XXX XXXX XXXX XXOO OOOO OOOO


---------- ALU -------------------------


ALUINST.r - stall
00101 OOOOO RRRR RX XXXX XXXX XXXR RRRR

ALUINST.c - stall
00110 OOOOO RRRR RX DDDD DDDD DDDD DDDD


O = Operation

00000:  do nothing

Påverkade statusflaggor:
Z  :  IF
N  :  IF
C  :  IF
O  :  IF
RRM:  IF
RRT:  IF

00001:  ADD unsigned

Påverkade statusflaggor:
Z  :  1 om resultatet är 0 annars 0
N  :  IF
C  :  1 om additionen orsakar carry, annars 0
O  :  IF
RRM:  IF
RRT:  IF

00010:  ADD signed

Påverkade statusflaggor:
Z  :  1 om resultatet är 0 annars 0
N  :  1 om resultatets sign bit är satt, annars 0
C  :  IF
O  :  1 om två positiva tal resulterar i ett tal med signbit 1(eller vice versa med 2 negativa tal), annars 0
RRM:  IF
RRT:  IF

00011:  SUB unsigned

Påverkade statusflaggor:
Z  :  1 om resultatet är 0 annars 0
N  :  1 om source < destination dvs indikerar att man använd operationen felaktigt, annars 0
C  :  1 om additionen orsakar carry, annars 0
O  :  IF
RRM:  IF
RRT:  IF

00100:  SUB signed

Påverkade statusflaggor:
Z  :  1 om resultatet är 0 annars 0
N  :  1 om resultatets sign bit är satt, annars 0
C  :  IF
O  :  1 om (s-d) < 0 om s > 0 och d < 0 eller (s-d) > 0 om s < 0 och d > 0 annars 0
RRM:  IF
RRT:  IF

00101:  MUL signed(fixed point)

Påverkade statusflaggor:
Z  :  1 om den övre hälften av bitar alla är 0 annars 0
N  :  1 om resultatets sign bit är satt, annars 0
C  :  IF
O  :  IF
RRM:  IF
RRT:  IF

00110:  bitshift right

Påverkade statusflaggor:
Z  :  1 om resultatet är 0 annars 0
N  :  1 om resultatets sign bit är satt, annars 0
C  :  =sista biten som shiftades ut
O  :  IF
RRM:  IF
RRT:  IF

00111:  bitshift left

Påverkade statusflaggor:
Z  :  1 om resultatet är 0 annars 0
N  :  1 om resultatets sign bit är satt, annars 0
C  :  =sista biten som shiftades ut
O  :  IF
RRM:  IF
RRT:  IF


01000:  AND

Påverkade statusflaggor:
Z  :  1 om resultatet är 0 annars 0
N  :  1 om resultatets sign bit är satt, annars 0
C  :  IF
O  :  IF
RRM:  IF
RRT:  IF

01001:  OR

Påverkade statusflaggor:
Z  :  1 om resultatet är 0 annars 0
N  :  1 om resultatets sign bit är satt, annars 0
C  :  IF
O  :  IF
RRM:  IF
RRT:  IF

01010:  XOR

Påverkade statusflaggor:
Z  :  1 om resultatet är 0 annars 0
N  :  1 om resultatets sign bit är satt, annars 0
C  :  IF
O  :  IF
RRM:  IF
RRT:  IF

01011:  NOT

Påverkade statusflaggor:
Z  :  1 om resultatet är 0 annars 0
N  :  1 om resultatets sign bit är satt, annars 0
C  :  IF
O  :  IF
RRM:  IF
RRT:  IF


/*
(ALL THESE ARE COMPARE, replacing these with CMP only)
01100:  EQUAL
01101:  LESSTHAN
01110:  MORETHAN
*/

01100:  CMP

Påverkade statusflaggor:
Z  :  1 om x-y=0 annars 0
N  :  1 om x < y annars 0
C  :  IF
O  :  IF
RRM:  IF
RRT:  IF



01111:  BITTEST
#0-31(tar in unsigned)
Påverkade statusflaggor:
Z  :  1 om biten är 0, 0 annars eller om talet som skickas in är >=REG_WIDTH
N  :  IF
C  :  IF
O  :  IF
RRM:  IF
RRT:  IF

10000: addera utan att ändra statusflaggor(unsigned)
11111: reserverad för att låta leftIn gå igenom (statusflaggor ändras ej)
-----------------------------------------


