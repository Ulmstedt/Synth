flera stores:


   constant pmemc : pmem_t := (
         ("00000" & "00000" & "00" & "0000" & "0000" & "0000" & "0000" & "0000"), -- NOP
         ("11000" & "000" & "0000" & "0000" & "1010" & "1111" & "1111" & "1111"), -- STORE.c &000 0000 0000, "1010 1111 1111 1111" 
         ("11000" & "000" & "0000" & "0001" & "1010" & "0000" & "1111" & "1111"), -- STORE.c &000 0000 0001, "1010 0000 1111 1111" 
         ("11000" & "000" & "0011" & "1111" & "1010" & "1111" & "0000" & "1111"), -- STORE.c &000 0011 1111, "1010 1111 0000 1111" 
         ("11000" & "000" & "0000" & "0011" & "0001" & "0001" & "0001" & "0001"), -- STORE.c &000 0000 0011, "0001 0001 0001 0001" 
         ("00000" & "000" & "0000" & "0000" & "0000" & "0000" & "0000" & "0000"), -- NOP
         ("11000" & "000" & "0000" & "0100" & "0001" & "1111" & "1111" & "1111"), -- STORE.c &000 0000 0100, "0001 1111 1111 1111" 
      others =>
         ("00000" & "000" & "0000" & "0000" & "0000" & "0000" & "0000" & "0000")
      );
funkar
      
   constant pmemc : pmem_t := (
         ("00000" & "00000" & "00" & "0000" & "0000" & "0000" & "0000" & "0000"),   --NOP
         ("11100" & "000" & "0100" & "0000" & "0000" & "0000" & "0000" & "0000"),   --LOAD.a R1, &000 0000 0000
         ("11100" & "000" & "1000" & "0000" & "0000" & "0000" & "0000" & "0001"),   --LOAD.a R2, &000 0000 0001
         ("11100" & "000" & "1100" & "0000" & "0000" & "0000" & "0000" & "0010"),   --LOAD.a R3, &000 0000 0010
         ("11100" & "000" & "0100" & "0000" & "0000" & "0000" & "0000" & "0100"),   --LOAD.a R1, &000 0000 0100
      others =>
         ("00000" & "000" & "0000" & "0000" & "0000" & "0000" & "0000" & "0000")
      );
funkar

   constant pmemc : pmem_t := (
         ("01010" & "000" & "0000" & "0000" & "0000" & "0000" & "0001" & "0000"), -- BRA.wo #16
         ("00000" & "000" & "0000" & "0000" & "0000" & "0000" & "0000" & "0000"), -- NOP
         ("01001" & "000" & "0000" & "0000" & "0000" & "0000" & "0000" & "0001"), -- BRA.wofr R1
         ("00000" & "000" & "0000" & "0000" & "0000" & "0000" & "0000" & "0000"), -- NOP
         
         ("00110" & "01100" & "00001" & "0" & "0000" & "0000" & "0000" & "0010"), -- CMPU.c
         ("10000" & "0000" & "000" & "0000" & "0000" & "0000" & "0000" & "1000"), -- BRZ.a #8
         ("00000" & "000" & "0000" & "0000" & "0000" & "0000" & "0000" & "0000"), -- NOP
         ("00000" & "000" & "0000" & "0000" & "0000" & "0000" & "0000" & "0000"), -- NOP
         
         
         ("10100" & "0000" & "000" & "0000" & "0000" & "0000" & "0000" & "1100"), -- BNZ.a #12
         ("00000" & "000" & "0000" & "0000" & "0000" & "0000" & "0000" & "0000"), -- NOP
         ("00000" & "000" & "0000" & "0000" & "0000" & "0000" & "0000" & "0000"), -- NOP
         ("00000" & "000" & "0000" & "0000" & "0000" & "0000" & "0000" & "0000"), -- NOP
         
         ("00110" & "00001" & "00001" & "0" & "0000" & "0000" & "0000" & "0001"), -- ADD R1 #1
         ("10100" & "0000" & "000" & "0000" & "0000" & "0000" & "0001" & "0000"), -- BNZ.a #32
         ("00000" & "000" & "0000" & "0000" & "0000" & "0000" & "0000" & "0000"), -- NOP
         ("01000" & "000" & "0000" & "0000" & "0000" & "0000" & "0000" & "0000"), -- BRA.a #0
         
         ("11101" & "00001" & "00" & "0000" & "0000" & "0000" & "0000" & "0010"), -- LOAD.c R1 #2
         ("00000" & "000" & "0000" & "0000" & "0000" & "0000" & "0000" & "0000"), -- NOP
         ("00000" & "000" & "0000" & "0000" & "0000" & "0000" & "0000" & "0000"), -- NOP
         ("01000" & "000" & "0000" & "0000" & "0000" & "0000" & "0000" & "0010"), -- BRA.a #2
         
         ("00000" & "000" & "0000" & "0000" & "0000" & "0000" & "0000" & "0000"), -- NOP
         ("00000" & "000" & "0000" & "0000" & "0000" & "0000" & "0000" & "0000"), -- NOP
         ("00000" & "000" & "0000" & "0000" & "0000" & "0000" & "0000" & "0000"), -- NOP
         ("00000" & "000" & "0000" & "0000" & "0000" & "0000" & "0000" & "0000"), -- NOP

      others =>
         ("00000" & "000" & "0000" & "0000" & "0000" & "0000" & "0000" & "0000")
      );

funkar

   constant pmemc : pmem_t := (
         ("00110" & "00001" & "00001" & "0" & "0000" & "0000" & "0000" & "0011"), -- ADD uns R1, 3
         ("00000" & "000" & "0000" & "0000" & "0000" & "0000" & "0000" & "0000"), -- NOP
         ("00101" & "00001" & "00001" & "0000" & "0000" & "0000" & "00001"),      -- ADD uns R1, R1

         others =>
         ("00000" & "000" & "0000" & "0000" & "0000" & "0000" & "0000" & "0000")
      );

funkar


   constant pmemc : pmem_t := (
         ("00110" & "00001" & "00001" & "0" & "0000" & "0000" & "0000" & "0011"), -- ADD uns R1, 3
         ("00101" & "00001" & "00001" & "0000" & "0000" & "0000" & "00001"),      -- ADD uns R1, R1
         ("00110" & "00011" & "00001" & "0" & "0000" & "0000" & "0000" & "0110"), -- SUB uns R1, 6

         ("00110" & "00010" & "00010" & "0" & "0000" & "0000" & "0000" & "0101"), -- ADD sig R2, 5
         ("00110" & "00100" & "00010" & "0" & "0000" & "0000" & "0000" & "0111"), -- SUB sig R2, 7
         ("00110" & "00010" & "00010" & "0" & "0000" & "0000" & "0000" & "0010"), -- ADD sig R2, 2

      others =>
         ("00000" & "000" & "0000" & "0000" & "0000" & "0000" & "0000" & "0000")
      );
funkar

   constant pmemc : pmem_t := (
         ("00110" & "00001" & "00001" & "0" & "0000" & "0000" & "0000" & "0011"), -- ADD uns R1, 3
         ("00101" & "00001" & "00001" & "0000" & "0000" & "0000" & "00001"),      -- ADD uns R1, R1
         ("00110" & "00011" & "00001" & "0" & "0000" & "0000" & "0000" & "0111"), -- SUB uns R1, 7

         
         ("00110" & "00010" & "00010" & "0" & "0000" & "0000" & "0000" & "0101"), -- ADD sig R2, 5
         ("00110" & "00100" & "00010" & "0" & "0000" & "0000" & "0000" & "0111"), -- SUB sig R2, 7
         ("00110" & "00010" & "00010" & "0" & "0000" & "0000" & "0000" & "0010"), -- ADD sig R2, 2

         ("00110" & "00001" & "00011" & "0" & "0000" & "0000" & "0000" & "0001"), -- ADD uns R3, 1
         ("00110" & "00001" & "00011" & "0" & "1111" & "1111" & "1111" & "1111"), -- ADD uns R3, 255
         
         ("00110" & "00010" & "00100" & "0" & "1111" & "1111" & "1111" & "1111"), -- ADD s R4, -1
         ("00110" & "00010" & "00100" & "0" & "1000" & "0000" & "0000" & "0000"), -- ADD s R4, -128

         ("00110" & "00100" & "00101" & "0" & "1111" & "1111" & "1000" & "0001"), -- SUB s R5, -127
         ("00110" & "00101" & "00101" & "0" & "0111" & "1111" & "1111" & "1111"), -- MUL s R5, 32767
         ("00110" & "00101" & "00101" & "0" & "0111" & "1111" & "1111" & "1111"), -- MUL s R5, 32767
         
      others =>
         ("00000" & "000" & "0000" & "0000" & "0000" & "0000" & "0000" & "0000")
      );

funkar
   constant pmemc : pmem_t := (

         ("00110" & "00010" & "00101" & "0" & "1111" & "1111" & "1000" & "0001"), -- ADD s R5, -127
         ("00110" & "00101" & "00101" & "0" & "0111" & "1111" & "1111" & "1111"), -- MUL s R5, 32767
         ("00110" & "00101" & "00101" & "0" & "1000" & "0000" & "0000" & "0000"), -- MUL s R5, -32768
         
      others =>
         ("00000" & "000" & "0000" & "0000" & "0000" & "0000" & "0000" & "0000")
      );

funkar

   constant pmemc : pmem_t := (

         ("00110" & "01001" & "00001" & "0" & "1010" & "1010" & "1010" & "1010"), -- OR R1, 1010 1010 1010 1010
         ("00110" & "00110" & "00001" & "0" & "0000" & "0000" & "0000" & "1000"), -- bitshiftr R1, 8
         ("00101" & "01011" & "00000" & "0" & "0000" & "0000" & "0000" & "0001"), -- NOT R0, /R1/ doesn't matter
         ("00101" & "01010" & "00000" & "0" & "0000" & "0000" & "0000" & "0001"), -- XOR R0, R1
         ("00110" & "00111" & "00000" & "0" & "0000" & "0000" & "0000" & "0001"), -- bitshiftl R0, 1
      others =>
         ("00000" & "000" & "0000" & "0000" & "0000" & "0000" & "0000" & "0000")
      );

funkar

   constant pmemc : pmem_t := (

         ("00110" & "01001" & "00001" & "0" & "0000" & "0000" & "0000" & "1111"), -- OR R1, 0000 0000 000 1111
         ("00110" & "01100" & "00001" & "0" & "0000" & "0000" & "0000" & "1111"), -- CMP uns R1, 15
         ("00110" & "01100" & "00001" & "0" & "0000" & "0000" & "0001" & "0000"), -- CMP uns R1, 16
         ("00110" & "01100" & "00001" & "0" & "0000" & "0000" & "0000" & "0001"), -- CMP uns R1, 1
      others =>
         ("00000" & "000" & "0000" & "0000" & "0000" & "0000" & "0000" & "0000")
      );
funkar nu när jag tagit bort a2 och b2

   constant pmemc : pmem_t := (
         ("11000" & "000" & "0000" & "0001" & "0000" & "0000" & "0000" & "0001"), -- STORE.c 1,#1
         ("11100" & "00001" & "000" & "0000" & "0000" & "000" & "0000" & "0001"), -- LOAD.a R1,1
         ("00110" & "00001" & "00001" & "0" & "0000" & "0000" & "0000" & "1000"), -- ADD R1,#8
         ("00100" & "00010" & "00" & "0000" & "0000" & "0000" & "000" & "00001"), -- MOVE R2,R1

         ("11001" & "000" & "0000" & "0010" & "0000" & "0000" & "000" & "00010"), -- STORE.r 2,R2
         ("11101" & "00001" & "000" & "0000" & "0000" & "000" & "0000" & "0100"), -- LOAD.c R1,4

         ("11101" & "00010" & "000" & "0000" & "0000" & "000" & "0001" & "1000"), -- LOAD.c R2,20
         ("11010" & "000" & "0000" & "1000" & "000" & "0000" & "0001" & "00001"), -- STORE.wo 8,1,R1

         ("11011" & "000" & "0000" & "1000" & "00001" & "00" & "0000" & "00010"), -- STORE.wofr 8,R1,R2

         ("11110" & "00011" & "000" & "0000" & "0001" & "000" & "0000" & "1000"), -- LOAD.wo R3,1,8
         ("11111" & "00100" & "00001" & "00" & "0000" & "000" & "0000" & "1000"), -- LOAD.wofr R4,R1,8
         --LOAD WITH OFFSET AND LOAD WITH OFFSET IN REGISTER LEFT TO TEST

      others =>
         ("00000" & "000" & "0000" & "0000" & "0000" & "0000" & "0000" & "0000")
      );
funkar

   constant pmemc : pmem_t := (
         ("11000" & "000" & "0000" & "0001" & "0000" & "0000" & "0000" & "0101"), -- STORE.c, $1, 5
         ("11100" & "000" & "0100" & "0000" & "0000" & "0000" & "0000" & "0001"), -- LOAD.a R1, $1
         ("00000" & "000" & "0000" & "0000" & "0000" & "0000" & "0000" & "0000"), -- NOP
         ("00000" & "000" & "0000" & "0000" & "0000" & "0000" & "0000" & "0000"), -- NOP
         ("00000" & "000" & "0000" & "0000" & "0000" & "0000" & "0000" & "0000"), -- NOP
         ("00000" & "000" & "0000" & "0000" & "0000" & "0000" & "0000" & "0000"), -- NOP
         ("01001" & "00001" & "000" & "0000" & "0000" & "000" & "0000" & "0001"), -- BRANCH(offset i reg) R1
         ("11101" & "000" & "1000" & "0000" & "0000" & "0000" & "0000" & "0001"), -- LOAD.c R2, 1 (rinner ut i pipelinen efter hopp görs)
         ("11101" & "000" & "0000" & "0000" & "0000" & "0000" & "0000" & "0001"), -- LOAD.c R0, 1 (skall inte ske)
         ("00000" & "000" & "0000" & "0000" & "0000" & "0000" & "0000" & "0000"), -- NOP
         ("00000" & "000" & "0000" & "0000" & "0000" & "0000" & "0000" & "0000"), -- NOP
         ("11000" & "000" & "0000" & "0010" & "0000" & "0000" & "0000" & "1000"), -- STORE.c, $2, 8

      others =>
         ("00000" & "000" & "0000" & "0000" & "0000" & "0000" & "0000" & "0000")
      )
funkar

package pmemContent is

   constant pmemc : pmem_t := (
         ("11000" & "000" & "0000" & "0001" & "0000" & "0000" & "0000" & "0101"), -- STORE.c, $1, 5
         ("11100" & "000" & "0100" & "0000" & "0000" & "0000" & "0000" & "0001"), -- LOAD.a R1, $1
         ("00110" & "011" & "1100" & "0010" & "0000" & "0000" & "0000" & "0010"), -- BITTEST R1, #2
         ("00110" & "011" & "1100" & "0010" & "0000" & "0000" & "0000" & "0001"), -- BITTEST R1, #1
      others =>
         ("00000" & "000" & "0000" & "0000" & "0000" & "0000" & "0000" & "0000")
      );
      
end pmemContent;
funkar

   constant pmemc : pmem_t := (
         --program som räknar ut 0+1+2+3+4+5 = 15 och lägger resultatet i R2 
         ("11101" & "000" & "0000" & "0000" & "0000" & "0000" & "0000" & "0000"), -- LOAD.c R0,0
         ("11101" & "000" & "0100" & "0000" & "0000" & "0000" & "0000" & "0101"), -- LOAD.c R1,5
         ("00101" & "000" & "0100" & "0000" & "0000" & "0000" & "0000" & "0001"), -- ADDuns R0, R1
         ("00110" & "000" & "1100" & "0010" & "0000" & "0000" & "0000" & "0001"), -- SUBuns R1, 1
         ("00110" & "011" & "0000" & "0010" & "0000" & "0000" & "0000" & "0000"), -- CMP R1, 0
         ("10100" & "000" & "0000" & "0010" & "0000" & "0000" & "0000" & "0010"), -- BNCC(branch if Zero flag is not set) to $2
         ("00100" & "000" & "1000" & "0000" & "0000" & "0000" & "0000" & "0000"), -- MOVE R2,R0 
      others =>
         ("00000" & "000" & "0000" & "0000" & "0000" & "0000" & "0000" & "0000")
      );
funkar
